radar_data <- as.matrix(df$Value)
dados <- data.frame(Categoria = c("A", "B", "C", "D", "E"), Valor = c(8, 6, 7, 9, 5))
dados <- data.frame(Categoria = c("A", "B", "C", "D", "E"), Valor = c(8, 6, 7, 9, 5))
radar_data <- as.matrix(dados$Valor)
rownames(radar_data) <- dados$Categoria
radar_data <- rbind(radar_data, c(3,3,3,3,3))
radar_data <- rbind(radar_data, c(3,3,3,3,3))
radar_data <- rbind(radar_data, c(10,10,10,10,10))
radar_data
df <- data.frame(Category = c("A", "B", "C", "D", "E"), Value = c(8, 6, 7, 9, 5))
radar_data <- as.matrix(df$Value)
rownames(radar_data) <- df$Category
radar_data
# Cria uma matriz com uma linha de valor mínimo e uma linha de valor máximo
min_max <- matrix(c(3, 10), nrow = 2, ncol = ncol(radar_data))
min_max
# Vincula as matrizes original e de valor mínimo/máximo
radar_data <- rbind(radar_data, min_max)
radar_data
rownames(radar_data)[nrow(radar_data)-1] <- "Min Value"
rownames(radar_data)[nrow(radar_data)] <- "Max Value"
rownames
rownames
radar_data
radarchart(radar_data,
vlabels = c("Value"),
cglcol = "#cccccc",
axistype = 0,
title = "Radar Chart")
radarchart(radar_data,
vlabels = c("Value"),
cglcol = "#cccccc",
axistype = 0,
title = "Radar Chart")
# Adiciona as linhas do valor mínimo e máximo
axis(1, at = seq(0, 4), labels = rownames(radar_data)[-c(nrow(radar_data), nrow(radar_data)-1)])
library(ggiraphExtra)
df <- data.frame(Category = c("A", "B", "C", "D", "E"), Value = c(8, 6, 7, 9, 5))
# Cria uma matriz com uma linha de valor mínimo e uma linha de valor máximo
radar_data <- rbind(df, data.frame(Category = c("Min Value", "Max Value"), Value = c(3, 10)))
# Cria o gráfico de radar com as linhas de grade em cinza e o título "Radar Chart"
p <- ggRadar(radar_data, aes(ggiraph:::toTitleCase(Category), Value),
grid.min = 0, grid.max = 10, grid.circle.size = 0.5, size.line = 1,
color.line = "blue", title = "Radar Chart")
# Adiciona as linhas do valor mínimo e máximo
p + geom_hline(yintercept = c(3, 10), linetype = "dashed", color = "red")
library(ggiraphExtra)
install.packages("ggiraphExtra")
library(ggiraphExtra)
df <- data.frame(Category = c("A", "B", "C", "D", "E"), Value = c(8, 6, 7, 9, 5))
# Cria uma matriz com uma linha de valor mínimo e uma linha de valor máximo
radar_data <- rbind(df, data.frame(Category = c("Min Value", "Max Value"), Value = c(3, 10)))
# Cria o gráfico de radar com as linhas de grade em cinza e o título "Radar Chart"
p <- ggRadar(radar_data, aes(ggiraph:::toTitleCase(Category), Value),
grid.min = 0, grid.max = 10, grid.circle.size = 0.5, size.line = 1,
color.line = "blue", title = "Radar Chart")
# Adiciona as linhas do valor mínimo e máximo
p + geom_hline(yintercept = c(3, 10), linetype = "dashed", color = "red")
library(ggplot2)
df <- data.frame(Category = c("A", "B", "C", "D", "E"), Value = c(8, 6, 7, 9, 5))
# Cria uma matriz com uma linha de valor mínimo e uma linha de valor máximo
radar_data <- rbind(df, data.frame(Category = c("Min Value", "Max Value"), Value = c(3, 10)))
# Cria o gráfico de radar com as linhas de grade em cinza e o título "Radar Chart"
p <- ggRadar(radar_data, aes(ggiraph:::toTitleCase(Category), Value),
grid.min = 0, grid.max = 10, grid.circle.size = 0.5, size.line = 1,
color.line = "blue", title = "Radar Chart")
library(ggiraphExtra)
df <- data.frame(Category = c("A", "B", "C", "D", "E"), Value = c(8, 6, 7, 9, 5))
# Cria uma matriz com uma linha de valor mínimo e uma linha de valor máximo
radar_data <- rbind(df, data.frame(Category = c("Min Value", "Max Value"), Value = c(3, 10)))
# Adiciona uma terceira variável fictícia com valor constante
radar_data$Constant <- 1
# Cria o gráfico de radar com as linhas de grade em cinza e o título "Radar Chart"
p <- ggRadar(radar_data, aes(ggiraph:::toTitleCase(Category), Value, group = Constant),
grid.min = 0, grid.max = 10, grid.circle.size = 0.5, size.line = 1,
color.line = "blue", title = "Radar Chart")
# Adiciona as linhas do valor mínimo e máximo
p + geom_hline(yintercept = c(3, 10), linetype = "dashed", color = "red")
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
exam_scores
# Define the variable ranges: maximum and minimum
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
create_beautiful_radarchart(student1_data, caxislabels = c(0, 5, 10, 15, 20))
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
exam_scores
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
create_beautiful_radarchart(student1_data, caxislabels = c(0, 5, 10, 15, 20))
create_beautiful_radarchart(df, caxislabels = c(0, 5, 10, 15, 20))
library(fmsb)
library(shiny)
runExample("01_hello")
library(shiny)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("title panel")
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
position = "right",
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
position = "right",
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
position = "right",
sidebarPanel("<p><strong>Side Bar</strong></p>"),
mainPanel("main panel")
)
)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
position = "right",
sidebarPanel("<p><strong>Side Bar</strong></p>"),
mainPanel("main panel")
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("My shiny app"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h1("First Level"),
h2("Second"),
h3("Third")
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel(
strong("My Shiny App")
),
sidebarLayout(
sidebarPanel(),
mainPanel(
h1("First Level"),
h2("Second"),
h3("Third")
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel(
strong("My Shiny App")
),
sidebarLayout(
sidebarPanel(
strong("Installation")
),
mainPanel(
h1("First Level"),
h2("Second"),
h3("Third")
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel(
strong("My Shiny App")
),
sidebarLayout(
sidebarPanel(
h3("Installation")
),
mainPanel(
h1("First Level"),
h2("Second"),
h3("Third")
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
runApp('Documentos/App-1/census-app')
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
)
)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel(h1("Painel principal"))
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel(h1("Painel principal"))
)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel()
)
server <- function(input, output) {
}
library(shiny)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel()
)
library(shiny)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel(),
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel(),
)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
)
),
mainPanel("Main panel"),
)
ui <- fluidPage(
titlePanel(strong("IMADB")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
),
mainPanel("Main panel")
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(strong("Imadb App")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
),
mainPanel("Main panel")
)
)
ui <- fluidPage(
titlePanel(strong("Imadb App")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
),
mainPanel("Main panel")
)
)
library(shiny)
ui <- fluidPage(
titlePanel(strong("Imadb App")),
sidebarLayout(
sidebarPanel(
helpText("Aqui ficará as funcionalidade do IMADB")
),
mainPanel("Main panel")
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('Documentos/app-shiny-imadb/App')
runApp('Documentos/app-shiny-imadb/App')
